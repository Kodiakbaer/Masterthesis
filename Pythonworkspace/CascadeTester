import cv2

##############################################
path = "Resources\haarcascades\haarcascade_lowerbody.xml"   # Path of the haarcascade
camNr = 0                           # Camera Number
objectName = "Sexy boi"                 # Object Name to Display
frameWidth = 1240
frameHeight = 960
color = (255, 0, 255)
#############################################

cap = cv2.VideoCapture(camNr)
cap.set(3, frameWidth)
cap.set(4, frameHeight)


def empty(a):
    pass

# create Trackbar
cv2.namedWindow("Result")
cv2.resizeWindow("Result", frameWidth, frameHeight+100)
cv2.createTrackbar("Scale", "Result", 200, 1000, empty)
cv2.createTrackbar("Neighbours", "Result", 8, 20, empty)
cv2.createTrackbar("Min Area", "Result", 20000, 100000, empty)
cv2.createTrackbar("Brightness", "Result", 100, 255, empty)

# Load the classifiers
cascade = cv2.CascadeClassifier(path)

while True:
    # set Camera brightness from Trackbar Value
    cameraBrightness = cv2.getTrackbarPos("Brightness", "Result")
    cap.set(10, cameraBrightness)

    # get Camera Image amd convert to grayscale
    success, img = cap.read()
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    # detect object using the cascade
    scaleVal = 1 + (cv2.getTrackbarPos("Scale","Result") / 1000)
    neighbours = cv2.getTrackbarPos("Neighbours", "Result")
    objects = cascade.detectMultiScale(gray, scaleVal, neighbours)

    # display the detected objects
    for (x, y, w, h) in objects:
        area = w*h
        minArea = cv2.getTrackbarPos("Min Area", "Result")
        if area > minArea:
            cv2.rectangle(img, (x,y), (x+w, y+h), color, 3)
            cv2.putText(img, objectName, (x, y-10), cv2.FONT_HERSHEY_COMPLEX_SMALL, 1, color, 2)
            roi_color = img[y:y+h, x:x+w]

    cv2.imshow("Result", img)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
